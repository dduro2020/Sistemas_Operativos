#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <err.h>
#include <errno.h>
#include <dirent.h>
#include <sys/wait.h>

enum {
	READ = 0,
	WRITE = 1,
	Bufsize = 8 * 1024,
	Pathsize = 1024,
};

int
file_type(char *file){
	int a = 1;
	char *p;
	p = strrchr(file, '.');
	if(p == NULL){
		return a;
	}
	if(strcmp(p, ".txt") == 0){
		a = 0;
		return a;
	}
	return a;
}

void
readfiles(char *path, char *filename)
{
	char buf[Bufsize];
    int nr, f;
	char file[Pathsize];

	strcpy(file, path);
	strcat(file, filename);
	
	f = open(file, O_RDONLY);
	while ((nr = read(f, &buf, Bufsize)) != 0) {
		//fprintf(stderr, "%s\n", file);
		if (nr < 0) {
			err(EXIT_FAILURE, "error: cannot read\n");
		}
		printf("%s", buf);
	}
	close(f);
}

void
readdirectory(char *path)
{
	DIR *d;
	struct dirent *ent;
	d = opendir(path);
	if (d == NULL) {
		err(EXIT_FAILURE, "error: open dir failed: %s", path);
	}
	strcat(path, "/");
	while ((ent = readdir(d)) != NULL) {
		if(ent->d_type == DT_REG && file_type(ent->d_name) == 0){
            readfiles(path, ent->d_name);
        }
    }
	closedir(d);
}

void
makefork(char *path){
	int pid, nr, wstatus;
	int fd[2], fd2[2];
	char sha[260];
	char *string;
	if(pipe(fd) < 0){
 		err(EXIT_FAILURE, "cannot make a pipe");
  	}
	if (pipe(fd2) < 0) {
		err(EXIT_FAILURE, "cannot make a pipe");
	}          
    pid = fork();     

    if(pid == 0) { 
		close(fd[WRITE]);  		  
		if ( dup2( fd[READ], 0 ) < 0 ) {
 			err(EXIT_FAILURE, "dup failed");
  		}
		close(fd[READ]);
		close(fd2[READ]);
		if ( dup2( fd2[WRITE], 1 ) < 0 ) {
 			err(EXIT_FAILURE, "dup failed");
  		} 
		close(fd2[WRITE]);
		execl("/usr/bin/sha256sum", "sha256sum", NULL);
		err(EXIT_FAILURE, "failed execl");

    }else if(pid == -1){
		err(EXIT_FAILURE, "cannot fork");
	}else { 
		close(fd[READ]);
		if ( dup2( fd[WRITE], 1 ) < 0 ) {
 			err(EXIT_FAILURE, "dup failed");
  		} 
		close(fd[WRITE]);
		readdirectory(path);
		//fprintf(stderr, "%s\n", path);
		close(fd2[WRITE]);
		pid = fork();

		if (pid == 0) {
			fprintf( stderr, "hola jeje %d \n", fd2[READ]);
			while ((nr = read(fd2[READ], &sha, 260)) != 0) {
				fprintf( stderr, "hola jeje \n");
				if (nr < 0) {
					err(EXIT_FAILURE, "error: cannot read\n");
				}
			}
			close(fd2[READ]);
			fprintf( stderr, "hola jeje \n");
			//strtok_r(sha, " ", &string);
			printf("hola %s\n", sha);
			exit(EXIT_SUCCESS);
		} else if (pid == -1) {
			err(EXIT_FAILURE, "cannot fork");
		}
		close(fd2[READ]);
		//strtok_r(sha, " ", &string);
		//fprintf( stderr, " hola %s\n", sha);
    }
	wait(&wstatus);
	wait(&wstatus);
}

int
main(int argc, char *argv[])
{ 
	if (argc > 2) {
		err(EXIT_FAILURE, "usage: %s directory", argv[0]);
	} else if(argc == 1){
		char pwd[Pathsize];
        getcwd(pwd, Pathsize);
		makefork(pwd);
    }else{
        makefork(argv[1]);
    }
	exit(EXIT_SUCCESS);
}
