#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <errno.h>
#include <sys/wait.h>
void
print_error()
{
    printf("usage: grepmatrix word [words ...] -f file [file ...]\n");
    exit(EXIT_FAILURE);
}
int
search_separation(char **list, int num_elem)
{
    int i, ret, count, flags;
    count = 0;

    for(i = 1; i < num_elem; i++){
        if(list[i][0] == '-'){
            flags++;
        }
        if(strcmp(list[i], "-f") == 0){
            count++;
        }
    }

    if(flags != 1){
        ret = -1;
    }else if((flags == 1) && (count == 1)){
        ret = 0;
    }

    return ret;
}

void
print_file_error(char *file)
{
    printf("error processing file %s\n", file);
	exit(EXIT_FAILURE);
}

void
child_creation_error()
{
	char *error = "";

	perror(error);
	exit(EXIT_FAILURE);
}

void
search_arg_error(char **list, int num_elem)
{
    int i, words, files;
    i = 1;
    words = 0;
    files = 0;

    if(search_separation(list, num_elem)){
        print_error();
    }

    while(strcmp(list[i], "-f") != 0){
        i++;
        words++;
    }

    if (i == (num_elem - 1)){
        print_error();
    }

    while(i < num_elem){
        i++;
        files++;
    }
    if (words == 0 || files == 0){
        print_error();
    }
}

void 
print_matrix( int f_position, int num_process, char **list, pid_t *pids){

    int t, j, z, wstatus;
    z = f_position;

    for(t = 1; t < f_position - 1; t++){
        printf("\"%s\"\t", list[t]);
    }
    printf("\n");

    for(j = 0; j < num_process; j++){
		waitpid(pids[j], &wstatus, 0);
		if (WEXITSTATUS(wstatus)) {
			printf("o\t");
		}else{
            printf("x\t");
        }
		if(j != 0 && ((j+1) % (f_position - 2) == 0)){
			printf("%s\n", list[z]);
			z++;
		}
    }
}

void
run_process(int f_position, int num_elem, char **list)
{

    int i, j, z, num_process;
    pid_t pid;

	char *ex[5] = { "/bin/fgrep", "-qsw", "", "", NULL };
    char *command = "/bin/fgrep";

	num_process = (f_position-2)*(num_elem-f_position);
    pid_t *pids = malloc(sizeof(pid_t)*(num_process));

	z = 0;
    for(i = f_position; i < num_elem; i++){
        ex[3] = list[i];
        for(j = 1; j < f_position - 1; j++){
            ex[2] = list[j];

            pid = fork();
            if (pid == 0) {
		        execv(command, ex);
            }else if (pid > 0) {
                pids[z] = pid;
				z++;
                
	        } else {
		        child_creation_error();
	        }
        }
    }

	print_matrix(f_position, num_process, list, pids);
}

int
search_flag_position(char **list, int num_elem)
{
    int i, f_position;
    f_position = 1;

    while(strcmp(list[f_position], "-f") != 0){
        f_position++;
    }
    f_position++;

    for(i = f_position; i < num_elem; i++){
        if (access(list[i], F_OK)){
            print_file_error(list[i]);
        }
    }

    return f_position;
}

int
main(int argc, char *argv[])
{
    int f_position;

    if (argc == 1){
        print_error();
    } else{
        search_arg_error(argv, argc);
        f_position = search_flag_position(argv, argc);
        run_process(f_position, argc, argv);
        exit(EXIT_SUCCESS);
    }
}
